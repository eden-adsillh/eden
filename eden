#!/usr/bin/env python3

# Copyright (c) 2017-2018 Samuel Thibault <samuel.thibault@ens-lyon.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY Samuel Thibault ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import sys
import pygame
import argparse
import logging
import socket
import select
import threading
import os
import crypt
import queue
import time
import signal

map = [ [ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' ],
        [ ' ', 'X', 'X', 'X', 'X', 'X', 'X', ' ', 'X', ' ' ],
        [ ' ', 'X', ' ', ' ', ' ', 'S', ' ', ' ', 'X', ' ' ],
        [ ' ', 'X', ' ', 'X', ' ', 'X', 'X', ' ', 'X', '2' ],
        [ '1', 'X', ' ', 'X', 'A', 'X', 'X', ' ', 'X', ' ' ],
        [ ' ', 'X', ' ', 'X', ' ', ' ', ' ', ' ', 'X', ' ' ],
        [ ' ', 'X', ' ', 'X', 'X', 'X', 'X', 'X', 'X', ' ' ],
        [ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' ] ]

width = len(map[0])
height = len(map)

# This is the sprites size
unit = 64
grass = (0x00, 0x90, 0x00)

# Network message structure
class n_message:
    player = 0
    msg = ""

u_attr = {}
current_user = {}
m_queue = queue.Queue()

# Parse arguments
def parse_args():
    parser = argparse.ArgumentParser(description="A game about adam, Eve")
    parser.add_argument('-s', '--server',
                        help="Connect to server",
                        dest='server')

    parser.add_argument('-p', '--port',
                        type=int, default=7777, dest='port',
                        help='Serveur port. default : 7777')

    parser.add_argument('-l', '--listen-port',
                        type=int, default=7777, dest='l_port',
                        help='Listen port. default : 7777')

    parser.add_argument('-d', '--debug',
                        help="Print output messages",
                        action='store_true',
                        dest='debug')

    parser.add_argument('--player',
                        default='adam',
                        choices=['adam', 'eve', 'snake'],
                        dest='player',
                        help='Play Adam, Eve or Snake')

    return parser.parse_args()

def get_all_hmoves():
    if not current_user['hashed_move']:
        return False
    for _, a in u_attr.items():
        if not a['hashed_move']:
            return False
    return True


def get_all_moves():
    if not current_user['move']:
        return False
    for _, a in u_attr.items():
        if not a['move']:
            return False
    return True

class NetEvents(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        self.so_list = []

    # Process command receive
    def process_command(self, msg, index):
        import re
        logging.debug("player %s sent command" % (msg))
        command, args = re.search(r"^/([\S]*)[\s](.*)", msg).group(1, 2)
        if command == "move":
            logging.debug("-> move '%s'" % (args))
            if u_attr[index]['hashed_move'] == '':
                u_attr[index]['hashed_move'] = args
                # When receive a message test if we have from all peers
            else:
                # move can't be changed
                logging.debug("->-> move already set for this player")

        elif command == "key":
            logging.debug("->  key '%s'" % (args))
            move, key = re.search(
                r"(.*)[\s](.*)",
                args).group(1, 2)
            logging.debug("key : '%s' | move '%s'" % (key, move))
            rhmove = crypt.crypt(move, key).split('$')[3]
            if u_attr[index]['hashed_move'] != rhmove:
                # Player cheat
                print("->-> cheat detected")# wanted '%s' / get '%s'" % (
                    #index, u_attr[index]['hashed_move'],
                    #rhmove))
                # TODO: what do you do in this case
            else:
                logging.debug("->-> move verification OK")
                u_attr[index]['move'] = move

        # someone want to annonce
        elif command == "annonce":
            logging.debug("-> annonce %s" % args)
            ip, port = args.split(':')
            found = False

            # Accept peer annonce only from first opponent
            if index != 4:
                logging.debug("->-> ignore peer %s" % (index))
                return

            # Test if peer is already connected
            for k, i in u_attr.items():
                # Send peer information to third player. exclude current
                # player and player who annonce him

                if i['ip'] == ip and i['port'] == port:
                    logging.debug("->-> already connected")
                    found = True

            if not found:
                self.client_connect(ip, port)

        # peer send which personnage he play
        elif command == "player":
            logging.debug("-> played character: %s" % (args))
            u_attr[index]['player'] = args

        elif command == "end_annonce":
            logging.debug("-> end_annonce")
            c_event.set()

        # Get peer listen port
        elif command == "port":
            logging.debug("-> peer listen port: %s" % (args))
            u_attr[index]['port'] = args

    def client_connect(self, ip, port):
        # If we have a peer, then wee need to connect
        o_so = socket.create_connection((ip, port))
        self.so_list.append(o_so)
        logging.debug("Connected to server ip :%s port:%s" % (ip, port))
        # Create dict for current player
        u_attr[o_so.fileno()] = {
            'player': '',
            'ip': ip,
            'port': port,                        # server listening port
            'hashed_move': '',
            'move': '',
            'key': ''
        }
        # create_message(o_so.fileno(), "/port " + str(args.l_port))
        msg = "/port " + str(args.l_port)

        o_so.send(msg.encode('utf8'))
        # self.send_queued_messages(self.so_list)
        # Waint until connection and player attribution done

    def run(self):
        global woman_move
        global man_move
        global snake

        # Initialize socket
        so = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
        so.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        so.bind(('', args.l_port))
        # Accept only 3 peer
        so.listen(3)
        self.so_list.append(so)
        logging.debug("Starting net thread")

        if args.server:
            self.client_connect(args.server, args.port)

        while not stop.is_set():
            rea, wri, exc = select.select(self.so_list, self.so_list, [], 0)

            # Whe have some net message...
            for item in rea:
                if item is so:
                    s, addr = item.accept()
                    self.so_list.append(s)
                    logging.debug("Here comes a new challenger %s" % (s.fileno()))

                    # Create dict for current player
                    u_attr[s.fileno()] = {
                        'player': '',
                        'ip': addr[0],
                        'port': '',
                        'hashed_move': '',
                        'move': '',
                        'key': ''
                    }
                    # Get peer listen port to annonce
                    message = s.recv(1024)
                    self.process_command(message.decode('utf-8'), s.fileno())

                    # Send peers to new connected client
                    if len(self.so_list) > 2:
                        # annonce all peers to new connected player
                        for an in wri:
                            message = "/annonce "
                            message += u_attr[an.fileno()]['ip'] + ':'
                            message += str(u_attr[an.fileno()]['port'])
                            s.send(message.encode('utf-8'))
                            time.sleep(.5)

                    else:
                        logging.debug("No peer to annonce")

                    # send current player
                    message = "/player " + current_user['player']
                    s.send(message.encode('utf-8'))

                    # send /end_annonce message to tell client continue
                    s.send('/end_annonce now'.encode('utf-8'))

                    # unlock main thread
                    s_event.set()

                else:
                    message = item.recv(1024)
                    if message == b'':
                        # Remove user attributes before socket
                        del u_attr[item.fileno()]
                        logging.debug(u_attr)
                        self.so_list.remove(item)
                        logging.debug("User disconnected")
                        # TODO: disconnect management
                    else:
                        self.process_command(message.decode('utf-8'),
                                             item.fileno())
            # We receive message, time to send
            while True:
                try:
                    m = m_queue.get(block=False)
                except queue.Empty:
                    break
                if m.player == 0:
                    logging.debug("send %s to all" % (m.msg))
                    for item in wri:
                        logging.debug("Sending a command")
                        item.send(m.msg.encode('utf-8'))
                else:
                    if False:
                        logging.error("Send a message to an unknown player")
                        sys.exit(10)
                    else:
                        logging.debug("send %s to %s" % (m.msg, m.player))
                        for item in wri:
                            # We need to find correct socket by fileno
                            if item.fileno() is m.player:
                                item.send(m.msg.encode('utf-8'))

            if get_all_hmoves():
                create_message(0,
                               "/key " + current_user['move'] + " " + current_user['key'])
                current_user['hashed_move'] = ''

            if get_all_moves():
                for index, item in u_attr.items():
                    print(item['player'])
                    if item['player'] == 'eve':
                        if item['move'] == "UP":
                            woman_move = [ 0, -1 ]
                        elif item['move'] == "DOWN":
                            woman_move = [ 0, 1 ]
                        elif item['move'] == "LEFT":
                            woman_move = [ -1, 0 ]
                        elif item['move'] == "RIGHT":
                            woman_move = [ 1, 0 ]
                    elif item['player'] == 'adam':
                        if item['move'] == "UP":
                            man_move = [ 0, -1 ]
                        elif item['move'] == "DOWN":
                            man_move = [ 0, 1 ]
                        elif item['move'] == "LEFT":
                            man_move = [ -1, 0 ]
                        elif item['move'] == "RIGHT":
                            man_move = [ 1, 0 ]
                    elif item['player'] == 'snake':
                        if item['move'] == "UP":
                            snake_move = [ 0, -1 ]
                        elif item['move'] == "DOWN":
                            snake_move = [ 0, 1 ]
                        elif item['move'] == "LEFT":
                            snake_move = [ -1, 0 ]
                        elif item['move'] == "RIGHT":
                            snake_move = [ 1, 0 ]
                    item['move'] = ''

# Signal handler for CTRL + C
def handler_exit(signum, frame):
    logging.debug("signal handler set...")
    stop.set()
    net.join()
    sys.exit()

def create_message(player, msg):
    logging.debug("Create a message to %s - %s" % (player, msg))
    m = n_message
    m.player = player
    m.msg = msg
    m_queue.put(m)

# Return true if all player charaters are set
def get_all_players():
    if len(u_attr) == 0:
        return True
    for index, item in u_attr.items():
        if not item['player']:
            logging.debug("player %s have not choose character" % (index))
            return False
    return True

signal.signal(signal.SIGINT, handler_exit)
args = parse_args()

log_f = '%(levelname)s: %(message)s'
if not args.debug:
    logging.basicConfig(format=log_f, level=logging.ERROR)
else:
    logging.basicConfig(format=log_f, level=logging.DEBUG)
    logging.debug("Debug mode activated")

logging.debug("starting game with parameters : %s" % (args))
# Two different Event, one for server, when a client is connected
# anoter for the client when connexion tu server is finished

s_event = threading.Event()
c_event = threading.Event()

# Event for signal...
stop = threading.Event()

# current player dict
current_user = {
    'move': '',
    'key': '',
    'hashed_move': '',
    'player': args.player
}

# Launching the listening thread
net = NetEvents()
net.start()

if args.server is not None:
    # Waiting for annonce
    c_event.wait()
    # Player must choose a character
    while not get_all_players():
        time.sleep(1)

    players = []
    for _, item in u_attr.items():
        players.append(item['player'])

# If there more than # player, can't play
    if len(players) >= 3:
        print("There's no avaible player exiting")
        stop.set()
        net.join()
        sys.exit()

    while current_user['player'] in players:
        a_p = set(['adam', 'eve', 'snake']).difference(set(players))
        print("%s is already selected by another player, avaible:" % (args.player))
        for index, name in enumerate(a_p):
            print("%s : %s" % (index, name))
        choice = input("Select a player : 0 - %s :" % (len(a_p)))
        if int(choice) > len(a_p):
            print("Bad choice!")
        else:
            current_user['player'] = list(a_p)[int(choice)]
            print("selected : %s" % (current_user['player']))
create_message(0, "/player " + current_user['player'])

def init_movement(movement):
    current_user['move'] = movement

# Unlock thread when user is connected (server mode)
if args.server is None:
    s_event.wait()

logging.debug("We pass the wait event")

# Pygame initialization
pygame.init()
screen = pygame.display.set_mode( (unit * width, unit * height) )
alpha = 128

# Load resources
woman = pygame.image.load("image/woman.png")
woman_ghost = woman.copy()
woman_ghost.fill((255, 255, 255, alpha), None, pygame.BLEND_RGBA_MULT)
woman_coords = [ 0, 0 ]
man = pygame.image.load("image/man.png")
man_ghost = man.copy()
man_ghost.fill((255, 255, 255, alpha), None, pygame.BLEND_RGBA_MULT)
man_coords = [ 0, 0 ]

snake = pygame.image.load("image/snake.png")
snake_ghost = snake.copy()
snake_ghost.fill((255, 255, 255, alpha), None, pygame.BLEND_RGBA_MULT)
snake_coords = [ 0, 0 ]

stone = pygame.image.load("image/stone.png")
stone_coords = [ 0, 0 ]

apple = pygame.image.load("image/apple.png")
apple_coords = [ 0, 0 ]

woman_move = [ 0, 0 ]
man_move = [ 0, 0 ]
snake_move = [ 0, 0 ]

# Initialize positions
def init():
    def find(coords, c):
        for y in range(len(map)):
            for x in range(len(map[y])):
                if map[y][x] == c:
                    coords[0] = x
                    coords[1] = y
                    return
        raise Exception('oops')

    find(woman_coords, '1')
    find(man_coords, '2')
    find(snake_coords, 'S')
    find(apple_coords, 'A')

init()

current_user['key'] = crypt.mksalt(crypt.METHOD_SHA256)
logging.debug("Create user key : %s" % (current_user['key']))

while True:
    e = pygame.event.wait()

    # Check for exit
    if e.type == pygame.QUIT:
        os.kill(os.getpid(), signal.SIGINT)
        sys.exit()

    elif e.type == pygame.KEYDOWN:
        if e.key == pygame.K_RETURN:
            if current_user['move'] and not current_user['hashed_move']:
                #current_user['key'] = crypt.mksalt(crypt.METHOD_SHA256)
                current_user['hashed_move'] = crypt.crypt(
                    current_user['move'],
                    current_user['key']).split('$')[3]
                create_message(0,"/move " + str(current_user['hashed_move']))

        elif not current_user['hashed_move']:

            if current_user['player'] == 'eve':
                if e.key == pygame.K_UP:
                    woman_move = [ 0, -1 ]
                    init_movement("UP")
                    pass
                elif e.key == pygame.K_DOWN:
                    woman_move = [ 0, 1 ]
                    init_movement("DOWN")
                    pass
                elif e.key == pygame.K_LEFT:
                    woman_move = [ -1, 0 ]
                    init_movement("LEFT")
                    pass
                elif e.key == pygame.K_RIGHT:
                    woman_move = [ 1, 0 ]
                    init_movement("RIGHT")
                    pass

            elif current_user['player'] == 'snake':
                if e.key == pygame.K_UP:
                    snake_move = [ 0, -1 ]
                    init_movement("UP")
                    pass
                elif e.key == pygame.K_DOWN:
                    snake_move = [ 0, 1 ]
                    init_movement("DOWN")
                    pass
                elif e.key == pygame.K_LEFT:
                    snake_move = [ -1, 0 ]
                    init_movement("LEFT")
                    pass
                elif e.key == pygame.K_RIGHT:
                    snake_move = [ 1, 0 ]
                    init_movement("RIGHT")
                    pass

            elif current_user['player'] == 'adam':
                if e.key == pygame.K_UP:
                    man_move = [ 0, -1 ]
                    init_movement("UP")
                    pass
                elif e.key == pygame.K_DOWN:
                    man_move = [ 0, 1 ]
                    init_movement("DOWN")
                    pass
                elif e.key == pygame.K_LEFT:
                    man_move = [ -1, 0 ]
                    init_movement("LEFT")
                    pass
                elif e.key == pygame.K_RIGHT:
                    man_move = [ 1, 0 ]
                    init_movement("RIGHT")
                    pass

    #else:
    #    print(e)

    def move(coords, move):
        return [ coords[0] + move[0], coords[1] + move[1] ]

    # Compute moves
    woman_newcoords = move(woman_coords, woman_move)
    man_newcoords = move(man_coords, man_move)
    snake_newcoords = move(snake_coords, snake_move)

    # But bound to window
    def bound(newcoords, coords, move):
        if newcoords[0] < 0 or newcoords[0] >= width or newcoords[1] < 0 or newcoords[1] >= height:
            # out of bounds
            newcoords[0] = coords[0]
            newcoords[1] = coords[1]
            move[0] = 0
            move[1] = 0

    bound(woman_newcoords, woman_coords, woman_move)
    bound(man_newcoords, man_coords, man_move)
    bound(snake_newcoords, snake_coords, snake_move)

    def collide(newcoords, coords, move):
        if map[newcoords[1]][newcoords[0]] == 'X':
            # Stone
            newcoords[0] = coords[0]
            newcoords[1] = coords[1]
            move[0] = 0
            move[1] = 0

    # Prevent collisions with stones
    collide(woman_newcoords, woman_coords, woman_move)
    collide(man_newcoords, man_coords, man_move)

    # Prevent collisions between players
    if woman_newcoords == man_newcoords:
        woman_newcoords = woman_coords
        woman_move = [ 0, 0 ]
        man_newcoords = man_coords
        man_move = [ 0, 0 ]

    # Make everybody move when everybody chose her/his direction
    if woman_move != [ 0, 0 ] and man_move != [ 0, 0 ]: # and (len(so_list) < 3 or snake_move != [ 0, 0 ]):
        woman_coords = woman_newcoords
        man_coords = man_newcoords
        snake_coords = snake_newcoords
        woman_move = [ 0, 0 ]
        man_move = [ 0, 0 ]
        snake_move = [ 0, 0 ]

    #logging.debug("woman at %u,%u to %u,%u" % (woman_coords[0], woman_coords[1], woman_newcoords[0], woman_newcoords[1]))
    #logging.debug("man at %u,%u to %u,%u" % (man_coords[0], man_coords[1], man_newcoords[0], man_newcoords[1]))
    #logging.debug("snake at %u,%u to %u,%u" % (snake_coords[0], snake_coords[1], snake_newcoords[0], snake_newcoords[1]))

    # Display everything
    screen.fill(grass)

    def blit(item, coords):
        screen.blit(item, (unit * coords[0], unit * coords[1]))

    # Display stones
    for y in range(len(map)):
        for x in range(len(map[y])):
            if map[y][x] == 'X':
                blit(stone, (x, y))

    # Display moving items
    blit(apple, apple_coords)

    blit(woman_ghost, woman_newcoords)
    blit(woman, woman_coords)
    blit(man_ghost, man_newcoords)
    blit(man, man_coords)

    blit(snake_ghost, snake_newcoords)
    blit(snake, snake_coords)

    # Show new state
    pygame.display.flip()

    if woman_coords == apple_coords:
        print("woman won!\n")
        sys.exit()
    elif man_coords == apple_coords:
        print("man won!\n")
        sys.exit()

    if woman_coords == snake_coords:
        print("woman lost!\n")
        sys.exit()
    elif man_coords == snake_coords:
        print("man lost!\n")
        sys.exit()
